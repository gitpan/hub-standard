=head1 NAME

Hub::Perl::Language - 

=head1 SYNOPSIS



=head1 DESCRIPTION



=head1 PUBLIC METHODS

=head2 sizeof

=over 4

=item Integer size of hashes, arrays, and scalars




 Usage: sizeof \%hash
 Usage: sizeof \@array
 Usage: sizeof \$scalar_ref
 Usage: sizeof $scalar
 Usage: sizeof \%more, \@than, $one


Sizes are computed as follows:


  HASH    - Number of keys in the hash
  ARRAY   - Number of elements
  SCALAR  - Length as returned by C<length()>


The total size of all arguments is returned.


B<Example: Hash>: (matches)

    sizeof( { a=>1, b=>2, c=>3 } );


    3

B<Example: Array>: (matches)

    sizeof( [ 'a1', 'b2', 'c3' ] );


    3

B<Example: Scalar>: (matches)

    sizeof( "abc"                );


    3

B<Example: Scalar (ref)>: (matches)

    sizeof( \"abc"               );


    3

B<Example: Nothing>: (matches)

    sizeof( undef                );


    0

B<Example: Multiple values>: (matches)

    sizeof( "a", "b", "c"        );


    3


=back

=head2 check

=over 4

=item True if all items in list pass the test.





 Usage: check [OPTIONS], [TEST], LIST


OPTIONS:


  -opr    (or|and|xor)                            Operator  (default: 'and')


TEST:


  -test   (def|num|str|match|blessed|eval)        Test type (default: 'def')
  -isa    EXPR
  -ref    EXPR


OPERATORS:


  and             True when all items pass the test.

  or              True when any single item passes the test.

  xor             Alternation pattern. True unless two consecutive values
                  both pass or fail the test.



BASIC TEST:


  def             Items are defined
  num             Items are numeric
  str             Items are *not* numeric


OTHER TESTS:


  match=EXPR      Items match EXPR
  eval            Items are eval'd and truth is based on $@.  Note that the
                  eval *actually* happens, so don't do anything that will
                  break your code.  The intention of this check is for:



B<Example> returns: B<abort>:

    my $compression = check( '-test=eval', 'use IO::Zlib' ) ? 1 : 0;



STRUCTURE TESTS:


  blessed         Items are blessed
  ref=EXPR        Item's ref matches EXPR (does *not* include @ISA)
  isa=EXPR        Item's ref or @ISA match EXPR.  Much like UNIVERSAL::isa
                  except allows regular expressions.




B<Example: none are defined> returns: B<false>:

    check( undef, undef, undef );


B<Example: only one is defined> returns: B<false>:

    check( 1, undef );


B<Example: both are defined> returns: B<true>:

    check( 1, 1 );


B<Example: one is defined> returns: B<true>:

    check( 1, undef, -opr => 'or' );



B<Example> returns: B<false>:

    check( -opr => 'xor', 1, 1 );


B<Example> returns: B<false>:

    check( -opr => 'xor', undef, undef );



B<Example> returns: B<true>:

    check( -opr => 'xor', undef, 1 );


B<Example> returns: B<true>:

    check( -opr => 'xor', 1, undef );



B<Example> returns: B<true>:

    check( -opr => 'xor', 1, undef, 1, undef );


B<Example> returns: B<false>:

    check( -opr => 'xor', 1, undef, 1, 1, undef );


B<Example> returns: B<true>:

    check( -opr => 'xor', undef, 1, undef, 1 );



=back

=head2 opts

=over 4

=item 

 Usage: opts [OPTIONS], \ARRAY, [\HASH]


Split parameter arrays into options and arguments.



OPTIONS:


  -prefix=EXPR            # specify option prefix, default is single dash (-).



  -assign=EXPR            # specify assignment character, default is the
                            equal sign (=).


  -append=EXPR            # specify append character, default is the
                            plus sign (+).



In array context, we return two references.  Which may cause confusion:


   my %opts = Hub::opts( \@_ );                # Wrong!
   my $opts = Hub::opts( \@_ );                # Correct!
   my ($opts,$args) = Hub::opts( \@_ );        # Correct!


Options are extracted (via splice) from the referenced array. The advantage
is both for performance (don't make a copy of the array), and so you may
use @_ (or @ARGV, etc) normally, as data:



B<Example: at-underscore contains everyting but the '-with' option>: (matches)

   sub myjoin {
      my $opts = Hub::opts( @_ );
      return join( $$opts{'with'}, @_ );
   }

   myjoin( 'a', 'b', '-with=;', 'c', 'd' );


    a;b;c;d




1. Arguments are elements which do *not* begin with a dash (-).



2. Options are elements which begin with a B<single> dash (-) and are not
   negative numbers.



3. An option of '-opts' is reserved for passing in already parsed option
   hashes.



4. Options will have their leading dash (-) removed.



5. Options values are formed as:


  Given:                  opt1 will be:       because:


  -opt1=value             'value'             contains an equal sign
  -opt1 nextelem          'nextelem'          next element is *not* an option
  -opt1 -option2          1                   next element is also an option
  -opt1                   1                   it is the last element
  -opt1                   1                   it is the last element
  -opt1=a -opt1=b         b                   last one wins
  -opt1=a +opt1=b         [ 'a', 'b' ]        it was specified using '+'
  +opt1=a +opt1=b         [ 'a', 'b' ]        they can both be '+'



For example:


  my($opts,$args) = Hub::opts( [ 'a', 'b', '-c' => 'c', '-x', '-o=out' ] );

  print "Opts:\n", Hub::hprint( $opts );
  print "Args:\n", Hub::hprint( $args );


Will print:


  Opts:
  c => c
  o => out
  x => 1
  Args:
  a
  b



=back

=head2 objopts

=over 4

=item Split @_ into ($self,$opts), leaving @_ with remaining items.



 Usage: objopts \@params, [\%defaults]

Convienence method for splitting instance method parameters.

Returns an array.


B<Example: Test return value>: (matches)

  my $obj = mkinst( 'Object' );
  my @result = objopts( [ $obj ] );
  join( ',', map { ref($_) } @result );



    Hub::Base::Object,


=back

=head2 cmdopts

=over 4

=item Extract short and long options from @ARGV


 Usage: cmdopts \@arguments
 Usage: cmdopts \@arguments, \%default_options


Single-dash paramaters are always boolean flags.  Flags are broken apart such
that:


  -lal


becomes


  -l -a -l


To create a list (ARRAY) of items, use '++' where you would normally use '--'.


B<Example>: (matches)

  my $opts = cmdopts(['--letters=a', '++letters=b', '++letters=c']);
  join('-', @{$$opts{'letters'}});


    a-b-c


=back

=head2 hashopts

=over 4

=item Get options and parameters as a hash


 Usage: hashopts \@parameters


The purpose of this method is to even out the returned parameter list by
adding an undefined value if there are an odd number of elements in the list.

This avoids the Perl warning:


  Odd number of elements in hash assignment


When parsing options as:


  my ($opts, %fields) = Hub::opts(...)

B<Example> returns: B<defined>:

  my ($opts, %hash) = Hub::hashopts(['key1', -foo]);
  $hash{'key1'}



=back

=head2 subst

=over 4

=item 

 Usage: subst

Call to perl's substitution operator.  Represented here as a function to
facilitate transformation by reducing the need for temporaries.  In essence,
the goal is to reduce:


  my $bakname = getfilename();
  $bakname =~ s/\.db$/\.bak/;


to:


  my $bakname = Hub::subst( getfilename(), '\.db$', '.bak' );


without modifying the original string returned by getfilename().



=back

=head2 getuid

=over 4

=item Return the UID of the provided user


 Usage: getuid $user_name
If perl has not been compiled with 'getpwnam', $user_name is returned.

-1 is returned when no user is found


=back

=head2 getgid

=over 4

=item Return the GID of the provided group


 Usage: getgid - $group_name
If perl has not been compiled with 'getgrnam', $group_name is returned.

-1 is returned when no group is found


=back

=head2 touch

=over 4

=item 

 Usage: touch LIST

Changes the access and modification times on each file of a list of files.



=back

=head2 expect

=over 4

=item Croak if arguments do not match their expected type


 Usage: expect [OPTIONS], [TEST], LIST


OPTIONS:


  -back   \d      # Carp level (for reporting further up the callstack)
  -not    0|1     # Invert the result


TESTS:


  -blessed        # All LIST items are blessed
  -match=EXPR     # All LIST items match /EXPR/
  -ref=EXPR       # All LIST items' ref match /EXPR/


By default, LIST is made up of key/value pairs, where the key is the type
(what ref() will return) and the value is what will be tested.  LIST may
contain one or more key/value pairs such as:


  HASH            => arg
  REF             => arg
  My::Package     => arg

B<Example> returns: B<true>:

    Hub::expect( -match => 'and|or|xor', 'and' );


B<Example> returns: B<true>:

    Hub::expect( HASH => {}, HASH => {} );


B<Example> returns: B<abort>:

    Hub::expect( -blessed => {} );


B<Example> returns: B<true>:

    Hub::expect( -blessed => mkinst( 'Object' ) );


B<Example> returns: B<abort>:

    Hub::expect( -match => 'and|or|xor', 'if', 'or', 'and' );


B<Example> returns: B<abort>:

    Hub::expect( ARRAY => {} );


B<Example> returns: B<abort>:

    Hub::expect( -blessed => 'abc' );


B<Example> returns: B<true>:

    Hub::expect( -ref => 'HASH', {} );


B<Example> returns: B<true>:

    Hub::expect( -ref => 'HASH', mkinst('Object') );



=back

=head2 fear

=over 4

=item 

Croak if arguments match their feared type.

This is a shortcut to L<expect> with a '-not=1' option.


B<Example> returns: B<abort>:

    Hub::fear( HASH => {} );


B<Example> returns: B<true>:

    Hub::fear( HASH => [] );



=back

=head2 abort

=over 4

=item Croak nicely.



 Usage: abort -msg => 'Croak message'
 Usage: abort -back => LEVEL


B<Example> returns: B<abort>:

    abort( -msg => 'Goddamn hippies' );



=back

=head2 bestof

=over 4

=item 

 Usage: bestof @list
 Usage: bestof @list, -by=max|min|def|len|gt|lt|true


Best value by criteria (default 'def').



=back

=head2 min

=over 4

=item Minimum value




 Usage: min @LIST


Returns the least element in a set.


B<Example: Two integers>: (matches)

    Hub::min(1,2);


    1

B<Example: Three integers>: (matches)

    Hub::min(2,1,3);


    1

B<Example: Three integers>: (matches)

    Hub::min(2,-1,3);


    -1

B<Example: One integer>: (matches)

    Hub::min(1);


    1

B<Example: Undefined value>: (matches)

    Hub::min(1,undef);


    1

B<Example: Zero>: (matches)

    Hub::min(undef,1,0);


    0

B<Example: Three decimal values>: (matches)

    Hub::min(.009,1.001);


    0.009


=back

=head2 max

=over 4

=item Maximum value




 Usage: max @LIST


Returns the greatest element in a set.


B<Example: Three decimal values>: (matches)

    Hub::max(.009,-1.01,2,undef,0);


    2


=back

=head2 intdiv

=over 4

=item Integer division




 Usage: intdiv $DIVIDEND, $DIVISOR


Returns an array with the number of times the divisor is contained in the
dividend, and the remainder.


B<Example: 3 divided by 2 is 1R1>: (matches)

    join(',',Hub::intdiv(3,2));


    1,1


=back

=head2 flip

=over 4

=item 

given a hash reference, swap keys with values and return a new hash reference.



=back

=head2 rmval

=over 4

=item Remove matching elements from a hash or an array.



 Usage: rmval \@array, $value
 Usage: rmval \%hash, $value

B<Example>: (matches)

    join('',@{rmval([1,2,3,4],3)});


    124


=back

=head2 cpref

=over 4

=item Recursively clone the reference, returning a new reference.



 Usage: cpref ?ref
Implemented because the Clone module found on CPAN crashes under my mod_perl
and FastCGI test servers...



=back

=head2 random_id

=over 4

=item Get a random numeric value for use as an id


 Usage: random_id


Creates a checksum of the current time() plus 4 digit rand() number.



=back

=head2 checksum

=over 4

=item Create a unique identifier for the provided data


 Usage: checksum [params..]
Params can be scalars, hash references, array references and the like.


B<Example>: (matches)

  my $x = 'like catfood';
  Hub::checksum( 'my', { cats => 'breath' }, ( 'smells', $x ) );



    2023611966


=back

=head2 merge

=over 4

=item Merge several hashes


 Usage: merge \%target, \%source, [\%source..], [options]
returns \%hash


Merges the provided hashes.  The first argument (destination hash) has
precedence (as in values are NOT overwritten) unless -overwrite is given.



By default this routine modifies \%target.  Specifiy -copy circumvent.



OPTIONS:


  -copy                   Do not modify \%target.



  -overwrite=1            Overwrite values as they are encounterred.



  -prune=1                Gives the destination hash the same structure as
                          the source hash (or the composite of all which is
                          in common when multiple source hashes are provided).



                          If the destination is missing a value, it is
                          initialized from the source hash.



                          If the destination has a value which is not in all
                          of the source hashes, it is deleted.



=back

=head2 flatten

=over 4

=item Get a consistent unique-by-data string for some data structure.



 Usage: flatten \%hash
 Usage: flatten \%array


=back

=head2 replace

=over 4

=item 

 Usage: replace MATCHING_REGEX, SUBSTITUTION_REGEX, TEXT

Do a s/// operation on a given segment of the string.



For example, say we want to remove the ': ;' pattern from the style portion,
but not from the data portion:


  <div style="font-family: ;">keep this: ;stuff</div>


Use this method as:


  $text = Hub::replace( "style=\".*?\"", "s/[\\w\\-]+\\s*:\\s*;//g", $text );




=back

=head2 digout

=over 4

=item 

 Usage: digout REF, ID

Return an array of all nested values in an order that can be processed.



NOTE! Scalar values are returned as references.

See how 'packdata' uses this method to dereference.



Arrays are ignored unless their members are hashes with an _id member.



Reverse the results of this array to process data in a way that the children
are affected before their parents.



=back

=head2 diff

=over 4

=item Creates a nest of the differences between the provided structures.



 Usage: diff \%hash1, \%hash2
 Usage: diff \@array1, \@array2


If a conflict of types (with the same key) is encounterred, the right-hand
sturcture is used.



NOTE: Although this routine compares contents, it returns references to the
original hashes (use L<Hub::cpref> on the result to detatch.)


=back

=head2 dice

=over 4

=item Break apart the string into the least number of segments


 Usage: dice [options] $string
options:
  beg=$literal    Begin of balanced pair, Default is '{'
  end=$literal    End of balanced pair, Default is '}'

B<Example>: (matches)

    join( ';', dice( "a{b{c}}c{d}" ) );


    a;{b{c}};c;{d}


=back

=head2 indexmatch

=over 4

=item Search for an expression within a string and return the offset


 Usage: indexmatch [options] $string, $expression, $position
 Usage: indexmatch [options] $string, $expression


Returns -1 if $expression is not found.



options:


  -after=1        Return the position *after* the expression.


B<Example>: (matches)

    indexmatch("abracadabra", "[cd]")


    4

B<Example>: (matches)

    indexmatch("abracadabra", "a", 3)


    3

B<Example>: (matches)

    indexmatch("abracadabra", "d{2,2}")


    -1

B<Example>: (matches)

    indexmatch("scant", "can", "-after=1")
                - indexmatch("scant", "can")


    3


=back


=head1 INTERNAL METHODS

=head2 _assignopt

=over 4

=item 

 Usage: _assignopt Assign an option value.

 Usage: _assignopt \%options, \%dest, $key, $val


=back

=head2 _merge_hash

=over 4

=item 



=back

=head2 _merge_array

=over 4

=item 



=back

=head2 _merge_element

=over 4

=item 



=back

=head2 _diff_hashes

=over 4

=item 

 Usage: _diff_hashes &HASH, &HASH

Difference between two hashes.



=back

=head2 _diff_arrays

=over 4

=item 

 Usage: _diff_arrays &ARRAY, &ARRAY

Difference between two arrays.



=back


=head1 AUTHOR

Ryan Gies (ryangies@livesite.net)


=head1 COPYRIGHT

Copyright (C) 2006-2007 by Livesite Networks, LLC. All rights reserved.

Copyright (C) 2000-2005 by Ryan Gies. All rights reserved.


Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, 
this list of conditions and the following disclaimer.

* The origin of this software must not be misrepresented; you must not 
claim that you wrote the original software. If you use this software in a 
product, an acknowledgment in the product documentation would be 
appreciated but is not required.

* Altered source versions must be plainly marked as such, and must not be 
misrepresented as being the original software.

* The name of the author may not be used to endorse or promote products 
derived from this software without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED 
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
OF SUCH DAMAGE.

To the best of our knowledge, no patented algorithms have been used. However, we
do not have the resources to carry out a patent search, and therefore cannot 
give any guarantee of the above statement.


=head1 UPDATED

08/02/2007

=cut
