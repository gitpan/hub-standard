=head1 NAME

Hub::Base::Object - Standard object base class


=head1 SYNOPSIS


    package MyPackage;
    use strict;
    use Hub qw(:base);
    push our @ISA, qw(Hub::Base::Object);



=head1 DESCRIPTION


This virtual base class ties itself to L<Hub::Knots::Object|Hub::Knots::Object> 
in order to separate private variables from public ones.  That determination is 
made by inspecting the 'caller', such that a derived class can:

    $self->{'name'} = ref($self);

and the consumer of that class can:

    $object->{'name'} = 'Kylee';

without stepping on your private 'name' variable.

=head2 Intention

Using this scheme, one can create an instance of your class and use it just
like a HASH, or an object.  When your class wants to maintain state
information, it may use its self reference as normal.  And when the consumer
wants to iterate through data values, it may:

    while( my($k,$v) = keys %$object ) {

without any of your state variables needing to be parsed-out.

=head2 Bypassing public/private switching

If you wish to set a public member from inside your class, prepend the hash key
with B<public:>

    $self->{'public:name'} = 'Steve';

And, to set a private member on an instance of your class, prepend the hash key
with B<private:>

    $object->{'private:name'} = 'My::Object';

Additionally, you may grab a reference to the underlying public and private
data hashes by using the L<daccess> method:

    my $public = $object->daccess('public');
    croak unless $$public{'name'} eq $$object{'name'};



=head1 PUBLIC METHODS

=head2 new

=over 4

=item Constructor.



 Usage: new [@parameters]
Parameters are passed to the standard initialization method L<refresh>.



=back

=head2 daccess

=over 4

=item Direct access to member hashes


 Usage: daccess $hash_key
Where $hash_key and be:
  'public'        Public hash
  'private'       Private hash
  'internal'      Internal hash (used to tie things together)


=back

=head2 refresh

=over 4

=item Return instance to initial state.



 Usage: refresh [@parameters]


Interface method, override in your derived class.  Nothing is done in this
base class.



Called implictly by L<new>, and when persistent interpreters (such as
mod_perl) would have called L<new>.



=back



=head1 AUTHOR

Ryan Gies (ryangies@livesite.net)


=head1 COPYRIGHT

Copyright (C) 2006-2007 by Livesite Networks, LLC. All rights reserved.

Copyright (C) 2000-2005 by Ryan Gies. All rights reserved.


Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, 
this list of conditions and the following disclaimer.

* The origin of this software must not be misrepresented; you must not 
claim that you wrote the original software. If you use this software in a 
product, an acknowledgment in the product documentation would be 
appreciated but is not required.

* Altered source versions must be plainly marked as such, and must not be 
misrepresented as being the original software.

* The name of the author may not be used to endorse or promote products 
derived from this software without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED 
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
OF SUCH DAMAGE.

To the best of our knowledge, no patented algorithms have been used. However, we
do not have the resources to carry out a patent search, and therefore cannot 
give any guarantee of the above statement.


=head1 UPDATED

06/09/2007

=cut
