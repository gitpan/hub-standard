=head1 NAME

Hub::Data::Nest - Nested data object

Part of the L<Hub Library|hublib>

=head1 SYNOPSIS


    use Hub qw(:standard);
    my $nest = mkinst( 'Nest' );

    $$nest{'colors'} = {
      white => 'fff',
      black => '000',
    };

    print '#', $$nest{'colors/black'}, "\n";


=head1 DESCRIPTION


This virtual base class ties itself to
L<Hub::Knots::Addressable|Hub::Knots::Addressable> in order to hook into member 
access routines.

=head2 Intention

We wish to have a single hash which behaves as the root element of a
hierarchical data structure (such as XML or the DOM.)

=head2 See also:

L<hubaddr>


=head1 METHODS

=begin html

<table><tr><td>
<a class="methlink" href="#item_new">new</a>

</td></tr></table>

=end html


=over 4

=item new

B<Constructor.>




=back

=head1 INTERNAL

=begin html

<table><tr><td>
<a class="methlink" href="#item_autoload">AUTOLOAD</a>

</td><td>
<a class="methlink" href="#item_destroy">DESTROY</a>

</td></tr></table>

=end html


=over 4

=item AUTOLOAD

B<Proxy for data handler methods>




  get         # fetch
  set         # store
  append      # special store
  take        # delete

=back

=over 4

=item DESTROY

B<>

 Usage: DESTROY

Defining this function prevents it from being searched in AUTOLOAD

=back

=head1 AUTHOR



Ryan Gies

=head1 COPYRIGHT



Copyright (c) 2006 Livesite Networks, LLC.  All rights reserved.

Copyright (c) 2000-2005 Ryan Gies.  All rights reserved.

=head1 UPDATED

This file created by  on  at 

=cut
